<div><br><br></div>
<div>from django.db import models</div>
<div><br></div>
<div># Create your models here.</div>
<div><br></div>
<div><br></div>
<div>class Drug(models.Model):</div>
<div>    drug_bankID = models.CharField(max_length=20, primary_key=True)</div>
<div>    drugtype = models.IntegerField()  # being either 'biotech' or 'small molecule'</div>
<div>    name = models.CharField(max_length=225)  # string values</div>
<div>    groups = models.CharField(max_length=50, default=&quotNone&quot)  # string values</div>
<div><br></div>
<div>    categories = models.CharField(</div>
<div>        max_length=50, default=&quotNone&quot)  # string values</div>
<div>    description = models.TextField()  # long string values</div>
<div>    # SMILES = models.CharField(max_length=200)</div>
<div>    # InChIKey = models.CharField(max_length=200)</div>
<div>    aliases = models.TextField()  # similar to name</div>
<div>    kingdom = models.CharField(</div>
<div>        max_length=50, default=&quotNone&quot</div>
<div>    )  # being one of several values: 'Organic Compounds' 'Organic compounds' 'None' 'Inorganic compounds'</div>
<div>    superclass = models.CharField(</div>
<div>        max_length=50, default=&quotNone&quot</div>
<div>    )  # chars of numbers for encoded values</div>
<div>    classname = models.CharField(</div>
<div>        max_length=50, default=&quotNone&quot</div>
<div>    )  # chars of numbers for encoded values</div>
<div>    subclass = models.CharField(</div>
<div>        max_length=50, default=&quotNone&quot</div>
<div>    )  # chars of numbers for encoded values</div>
<div>    direct_parent = models.CharField(</div>
<div>        max_length=50, default=&quotNone&quot</div>
<div>    )  # chars of numbers for encoded values</div>
<div>    indication = models.TextField()  # long string values</div>
<div>    pharmacodynamics = models.TextField()  # long string values</div>
<div>    moa = models.TextField()  # long string values</div>
<div>    absorption = models.TextField()  # long string values</div>
<div><br></div>
<div>    toxicity = models.TextField()  # long string values</div>
<div>    halflife = models.TextField()  # long string values</div>
<div>    distribution_volume = models.TextField()  # long string values</div>
<div>    protein_binding = models.TextField()  # long string values</div>
<div><br></div>
<div>    dosages = models.TextField()  # long string values</div>
<div>    properties = models.TextField()  # long string values</div>
<div><br></div>
<div>    def __str__(self):</div>
<div>        return &quotDrugname: &quot + self.name + &quot with drugbank ID: &quot + self.drug_bankID</div>
<div><br></div>
<div>    # class Meta():</div>
<div>    #     db_table = 'drugs'</div>
<div><br></div>
<div><br></div>
<div> # build_drug.py</div>
<div>from django.core.management.base import BaseCommand, CommandError</div>
<div>from django.conf import settings</div>
<div><br></div>
<div><br></div>
<div>from drug.models import Drug</div>
<div><br></div>
<div>from optparse import make_option</div>
<div>import logging</div>
<div>import csv</div>
<div>import os</div>
<div>import pandas as pd</div>
<div><br></div>
<div><br></div>
<div>class Command(BaseCommand):</div>
<div>    help = &quotBuild Drug Data&quot</div>
<div><br></div>
<div>    def add_arguments(self, parser):</div>
<div>        parser.add_argument(</div>
<div>            &quot--filename&quot,</div>
<div>            action=&quotappend&quot,</div>
<div>            dest=&quotfilename&quot,</div>
<div>            help=&quotFilename to import. Can be used multiple times&quot,</div>
<div>        )</div>
<div><br></div>
<div>    logger = logging.getLogger(__name__)</div>
<div><br></div>
<div>    # source file directory</div>
<div>    drugdata_data_dir = os.sep.join([settings.DATA_DIR, &quotdrug_data&quot])</div>
<div><br></div>
<div>    print(&quotcheckpoint1&quot)</div>
<div><br></div>
<div>    def handle(self, *args, **options):</div>
<div>        if options[&quotfilename&quot]:</div>
<div>            filenames = options[&quotfilename&quot]</div>
<div>        else:</div>
<div>            filenames = False</div>
<div>        print(&quotcheckpoint 1.1, filenames = &quot, filenames)</div>
<div><br></div>
<div>        try:</div>
<div>            self.purge_drugs()</div>
<div>            self.create_drug_data(filenames)</div>
<div>        except Exception as msg:</div>
<div>            print(msg)</div>
<div>            self.logger.error(msg)</div>
<div><br></div>
<div>    def purge_drugs(self):</div>
<div>        print(&quotcheckpoint 1.2 inside purge_drugs function &quot)</div>
<div>        try:</div>
<div>            Drug.objects.all().delete()</div>
<div>        except Drug.DoesNotExist:</div>
<div>            self.logger.warning(&quotDrugs mod not found: nothing to delete.&quot)</div>
<div><br></div>
<div>        print(&quotcheckpoint 1.3 end of purge_drugs function &quot)</div>
<div><br></div>
<div>    def create_drug_data(self, filenames=False):</div>
<div>        print(&quotcheckpoint 1.4 start of create_drug_data function &quot)</div>
<div>        self.logger.info(&quotCREATING DRUGDATA&quot)</div>
<div><br></div>
<div>        # read source files</div>
<div>        if not filenames:</div>
<div>            filenames = [</div>
<div>                fn</div>
<div>                for fn in os.listdir(self.drugdata_data_dir)</div>
<div>                if fn.endswith(&quotdrug_data.csv&quot)</div>
<div>            ]</div>
<div>            print(&quotcheckpoint2&quot)</div>
<div>            print(filenames)</div>
<div><br></div>
<div>        for filename in filenames:</div>
<div><br></div>
<div>            filepath = os.sep.join([self.drugdata_data_dir, filename])</div>
<div><br></div>
<div>            data = pd.read_csv(filepath, low_memory=False,</div>
<div>                               encoding=&quotISO-8859-1&quot, sep=&quot;&quot)</div>
<div><br></div>
<div>            for index, row in enumerate(data.iterrows()):</div>
<div><br></div>
<div>                drug_bankID = data[index: index + 1][&quotpk&quot].values[0]</div>
<div>                drugtype = data[index: index + 1][&quotdrugtype&quot].values[0]</div>
<div>                name = data[index: index + 1][&quotname&quot].values[0]</div>
<div>                # drugalias = [</div>
<div>                #     &quot&quot if str(drugalias_raw) == &quotnan&quot else &quot, &quot +</div>
<div>                #     str(drugalias_raw)</div>
<div>                # ]</div>
<div>                # # trialadd = ['' if str(trialname) == drugname else 'Â ('+str(trialname)+')']</div>
<div>                # drugname = drugname + drugalias[0]</div>
<div>                groups = data[index: index + 1][&quotgroups&quot].values[0]</div>
<div>                categories = data[index: index + 1][&quotcategories&quot].values[0]</div>
<div>                description = data[index: index + 1][&quotdescription&quot].values[0]</div>
<div>                aliases = data[index: index + 1][&quotaliases&quot].values[0]</div>
<div>                kingdom = data[index: index + 1][&quotkingdom&quot].values[0]</div>
<div>                superclass = data[index: index + 1][&quotsuperclass&quot].values[0]</div>
<div>                classname = data[index: index + 1][&quotclassname&quot].values[0]</div>
<div>                subclass = data[index: index + 1][&quotsubclass&quot].values[0]</div>
<div>                direct_parent = data[index: index +</div>
<div>                                     1][&quotdirect_parent&quot].values[0]</div>
<div>                indication = data[index: index + 1][&quotindication&quot].values[0]</div>
<div>                pharmacodynamics = data[index: index +</div>
<div>                                        1][&quotpharmacodynamics&quot].values[0]</div>
<div>                moa = data[index: index + 1][&quotmoa&quot].values[0]</div>
<div>                absorption = data[index: index + 1][&quotabsorption&quot].values[0]</div>
<div>                toxicity = data[index: index + 1][&quottoxicity&quot].values[0]</div>
<div>                halflife = data[index: index + 1][&quothalflife&quot].values[0]</div>
<div>                distribution_volume = data[index: index +</div>
<div>                                           1][&quotdistribution_volume&quot].values[0]</div>
<div>                protein_binding = data[index: index +</div>
<div>                                       1][&quotprotein_binding&quot].values[0]</div>
<div>                dosages = data[index: index + 1][&quotdosages&quot].values[0]</div>
<div>                properties = data[index: index + 1][&quotproperties&quot].values[0]</div>
<div><br></div>
<div>                # # fetch protein</div>
<div>                # try:</div>
<div>                #     p = Protein.objects.get(entry_name=entry_name)</div>
<div>                # except Protein.DoesNotExist:</div>
<div><br></div>
<div>                #     self.logger.error(</div>
<div>                #         &quotProtein not found for entry_name {}&quot.format(</div>
<div>                #             entry_name)</div>
<div>                #     )</div>
<div>                #     continue</div>
<div><br></div>
<div>                print(&quotcheckpoint 2.1 - start to fetch data to Drugs table&quot)</div>
<div>                drug, created = Drug.objects.get_or_create(</div>
<div>                    drug_bankID=drug_bankID,</div>
<div>                    drugtype=drugtype,</div>
<div>                    name=name,</div>
<div>                    groups=groups,</div>
<div>                    categories=categories,</div>
<div>                    description=description,</div>
<div>                    aliases=aliases,</div>
<div>                    kingdom=kingdom,</div>
<div>                    superclass=superclass,</div>
<div>                    classname=classname,</div>
<div>                    subclass=subclass,</div>
<div>                    direct_parent=direct_parent,</div>
<div>                    indication=indication,</div>
<div>                    pharmacodynamics=pharmacodynamics,</div>
<div>                    moa=moa,</div>
<div>                    absorption=absorption,</div>
<div>                    toxicity=toxicity,</div>
<div>                    halflife=halflife,</div>
<div>                    distribution_volume=distribution_volume,</div>
<div>                    protein_binding=protein_binding,</div>
<div><br></div>
<div>                    dosages=dosages,</div>
<div>                    properties=properties)</div>
<div>                drug.save()</div>
<div>                print(&quota record is saved&quot)</div>
<div><br></div>
<div>                # target_list = drug.target.all()</div>
<div><br></div>
<div>        self.logger.info(&quotCOMPLETED CREATING DRUGDATA&quot)</div>
<div><br></div>
<div><br></div>
<div><br></div>
<div><br></div>
<div>#interaction</div>
<div>from django.db import models</div>
<div>from drug.models import Drug</div>
<div>from protein.models import Protein</div>
<div><br></div>
<div># Create your models here.</div>
<div><br></div>
<div><br></div>
<div>class Interaction(models.Model):</div>
<div>    interaction_id = models.AutoField(auto_created=True, primary_key=True)</div>
<div>    drug_bankID = models.ForeignKey(&quotdrug.Drug&quot, on_delete=models.CASCADE)</div>
<div>    uniprot_ID = models.ForeignKey(&quotprotein.Protein&quot, on_delete=models.CASCADE)</div>
<div>    actions = models.TextField()  # String list, Can be set of categorical data</div>
<div>    known_action = models.TextField()  # String list, Can be set of categorical data</div>
<div>    interaction_type = models.CharField(</div>
<div>        max_length=100</div>
<div>    )  # being one of several values: transporter, enzyme, target, carrier</div>
<div>    atc_codes = models.TextField()</div>
<div>    pubmed_ids = models.TextField()</div>
<div>    ChEMBL = models.TextField()</div>
<div><br></div>
<div>    def __str__(self):</div>
<div>        return str(self.interaction_id) + &quot _ &quot + self.interaction_types</div>
<div><br></div>
<div><br></div>
<div><br></div>
<div><br> models</div>
<div><br></div>
<div>from django.db import models</div>
<div>from variantmarker.models import VariantMarker</div>
<div><br></div>
<div># Create your models here.</div>
<div><br></div>
<div><br></div>
<div>class GenebassVariant(models.Model):</div>
<div>    gbv_id = models.AutoField(default=1, auto_created=True, primary_key=True)</div>
<div>    markerID = models.ForeignKey(</div>
<div>        &quotvariantmarker.VariantMarker&quot, on_delete=models.CASCADE)</div>
<div>    n_cases = models.FloatField()</div>
<div>    n_controls = models.FloatField()</div>
<div>    heritability = models.FloatField()</div>
<div>    # encoded as categorical data</div>
<div>    trait_type = models.CharField(max_length=200)</div>
<div>    phenocode = models.CharField(max_length=200)</div>
<div>    pheno_sex = models.CharField(max_length=200)  # encoded as categorical data</div>
<div>    coding = models.CharField(max_length=200)</div>
<div>    n_cases_defined = models.FloatField()</div>
<div>    n_cases_both_sexes = models.FloatField()</div>
<div>    n_cases_females = models.FloatField()</div>
<div>    n_cases_males = models.FloatField()</div>
<div>    description = models.TextField()</div>
<div>    description_more = models.TextField()</div>
<div>    coding_description = models.CharField(max_length=200)</div>
<div>    category = models.CharField(max_length=200)  # encoded as categorical data</div>
<div>    AC = models.FloatField()</div>
<div>    AF = models.FloatField()</div>
<div>    BETA = models.FloatField()</div>
<div>    SE = models.FloatField()</div>
<div>    AF_Cases = models.FloatField()</div>
<div>    AF_Controls = models.FloatField()</div>
<div>    Pvalue = models.FloatField()</div>
<div>    AC_calstat = models.FloatField()</div>
<div>    AF_calstat = models.FloatField()</div>
<div><br></div>