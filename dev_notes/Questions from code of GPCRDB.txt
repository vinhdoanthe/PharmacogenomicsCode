<div><h1>Questions from code of GPCRDB</h1></div>
<div><br></div>
<div><br></div>
<div><h2>-Cách viết url:</h2></div>
<div>url(r'^$', views.index, name='index'), </div>
<div>    url(</div>
<div>        r'^favicon.ico$',</div>
<div>        RedirectView.as_view(</div>
<div>            url=staticfiles_storage.url('home/images/favicon_dev.ico'),</div>
<div>            permanent=False),</div>
<div>        name=&quotfavicon&quot</div>
<div>    ),</div>
<div>    url(r'^citations', views.citations_json, name='citation')</div>
<div><br></div>
<div><br></div>
<div>-request.session.flush()</div>
<div><br></div>
<div><br></div>
<div>-serializer:</div>
<div>data = serializers.serialize( &quotpython&quot, News.objects.all().order_by('-date'), fields=('date','image','html'))</div>
<div>    return render(request, 'news/index.html', {'news': data})</div>
<div><br></div>
<div>-Cách dùng meta class</div>
<div><br></div>
<div>-BaseCommand</div>
<div>https://www.fullstackpython.com/django-core-management-base-basecommand-examples.html#:~:text=BaseCommand%20is%20a%20Django%20object%20for%20creating%20new,provides%20fantastic%20documentation%20for%20creating%20your%20own%20commands.</div>
<div><u><h2>django.core.management.base BaseCommand Example Code - Full Stack Python</h2></u><u><h2><br></h2></u></div>
<div><u><br></u></div>
<div><h1>CÁC KỸ THUẬT PYTHON</h1><u><h1><br></h1></u></div>
<div>-List comprehension</div>
<div>-add_argument</div>
<div>-Meta class</div>
<div>-deepcopy</div>
<div>-Re (regular expression) như re.sub. re.replace…</div>
<div>-enumerate</div>
<div>-<b>@cache_page </b>??? (Trong drug view)</div>
<div>-JSON</div>
<div>-OrderedDict</div>
<div>-continue trong if</div>
<div>-Kỹ thuật import giữa các module/package</div>
<div>-f String format </div>
<div>-json package</div>
<div>-**kwargs</div>
<div>-with open(filepath, “r”, encoding=“UTF-8”) as f…</div>
<div>-requests package</div>
<div>-xmltodict</div>
<div>-from rdkit import RDLogger</div>
<div>-set.intersection</div>
<div>-from pprint import pprint</div>
<div>-import xlrd</div>
<div>-import yaml</div>
<div>-Có rất nhiều kỹ thuật trong Build G-protein</div>
<div>-import logging</div>
<div>-import xml.etree.ElementTree</div>
<div>-itertools</div>
<div>-subprocess</div>
<div>-shlex</div>
<div>-from collection import defaultdict</div>
<div>-sys</div>
<div>-Phép trừ của 2 tập hợp</div>
<div>-from optparse import make_option</div>
<div>-enumerate pandas dataframe iterrows</div>
<div>-xem build drug —&gt rất ngắn, dễ coi</div>
<div><u><br></u></div>
<div><u><br></u></div>
<div><u><br></u></div>
<div><u><br></u></div>
<div><b><h1>KHÔNG HIỂU</h1></b><h1><br></h1></div>
<div>-Sao script trong build/management/command lại có thể import từ residue, protein package…, là các package ngang hàng với build?</div>
<div>-Tương tự, script model trong package protein có thể gọi đến residue.model với residue là package ngang hàng với protein</div>
<div>-view trong protein, muốn gọi đến model trong protein thì phải ref là from protein.models import…, mà gọi ngoài package thì, ví dụ như residue.model…</div>
<div><br></div>
<div><u><br></u></div>
<div><u><br></u></div>
<div><h1>CÁC KỸ THUẬT DJANGO</h1><u><h1><br></h1></u></div>
<div>-BaseCommand: </div>
<div>https://www.youtube.com/watch?v=i--OQ6dF7EU</div>
<div><u><h2>(1075) How to Create Custom Management Command in Django | Handling Arguments | Full Tutorial with Examples - YouTube</h2></u><u><h2><br></h2></u></div>
<div><br></div>
<div>https://github.com/akjasim/cb_django_custom_management_commands</div>
<div><u><h2>akjasim/cb_django_custom_management_commands (github.com)</h2></u><h2><br></h2></div>
<div>-Dủng rất nhiều: object.filter, object.prefetch_related, all, add, save</div>
<div>-request.is_ajax()</div>
<div><u><br></u></div>
<div><u><br></u></div>
<div><u><br></u></div>
<div><u><br></u></div>
<div><h1>BUILD</h1><u><h1><br></h1></u></div>
<div>-Trong Build all<u><br></u></div>
<div><u>  </u>+ Trong class Command (kế thừa lớp BaseCommand) có hàm</div>
<div>	-add_argument: đoán là để quy định các tham số của một lệnh nào đó</div>
<div>        -handle: đây chắc là các bước để thực hiện khi lệnh đó được thực thi</div>
<div>            +Bên trong handle, có chia làm các phase1 và phase1. Phase1 gọi một số hàm như ‘clear_cache’, ‘build_common’, ‘build_cittion’, ‘build_human_proteins’…. Phase2 gọi đến ‘buid_drug’, ‘build_protein_sets’… </div>
<div><h2>Vì sao phải chia làm 2 phase?</h2></div>
<div><br></div>
<div>-Trong build drug:</div>
<div>  +Tương tự, cũng định nghĩa class Command, trong class có hàm add_argument, handle. Ngoài ra còn có các hàm khác như purge_drugs, create_drug_data</div>
<div><br></div>
<div>-Trong build release_note:</div>
<div>  +Tương tự, cũng có hàm handle nhưng ko có hàm add_argument. Ngoài ra, có thêm hàm create_release_notes</div>
<div><br></div>
<div>-Trong build link:</div>
<div>  +Có hàm add_argument, handle. Ngoài ra có thêm create_links</div>
<div><u><br></u></div>
<div><u><br></u></div>
<div><h1>DRUG</h1><u><h1><br></h1></u></div>
<div><u><br></u></div>
<div>1.Drug model</div>
<div>-Quan Tâm ít field hơn data của mình</div>
<div>-Ko thấy các field dạng link</div>
<div>-Các trường text thì vẫn để text học charfield chứ ko dẫn link</div>
<div><br></div>
<div><br></div>
<div><h1>PROTEIN</h1></div>
<div><b><h1>-Model</h1></b></div>
<div><b>   + Class Protein: ngoài định nghĩa các field cần thiết, còn có các hàm tiện ích như  str, name dạng short và một số hàm get. Xem protein là 1 object và có các hàm get để truy cập thông tin từ đó. Không có hàm sét nào</b></div>
<div><b>   + Class ProteinConformation</b></div>
<div><b>   +Class IdentifiedSites</b></div>
<div><b>   +Class Site</b></div>
<div><b>   +Class ProteinState</b></div>
<div><b>   +Class Gene</b></div>
<div><b>   +Class Species</b></div>
<div><b>   +Class ProteinAlias</b></div>
<div><b>   +Class ProteinSet</b></div>
<div><b>   +Class ProteinSegment</b></div>
<div><b>   +Class ProteinSource</b></div>
<div><b>   +Class ProteinFamily</b></div>
<div><b>   +Class ProteinSequenceType</b></div>
<div><b>   +Class ProteinAnomaly</b></div>
<div><b>   +Class ProteinAnomalyType</b></div>
<div><b>   +Class ProteinAnomalyRuleSet</b></div>
<div><b>   +Class ProteinAnomallyRule</b></div>
<div><b>   +Class ProteinConformationTemplateStructure</b></div>
<div><b>   +Class ProteinCouplings</b></div>
<div><b> </b></div>
<div><b><br></b></div>
<div><b><br></b></div>
<div>try:</div>
<div>    from protwis.settings_local import *</div>
<div>except ImportError:</div>
<div>    from protwis.settings_local_development import *</div>
<div><br></div>
<div># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</div>
<div>import os</div>
<div>BASE_DIR = os.path.dirname(os.path.dirname(__file__))</div>
<div><br></div>
<div><br></div>
<div># Application definition</div>
<div>INSTALLED_APPS = (</div>
<div>    'django.contrib.admin',</div>
<div>    'django.contrib.auth',</div>
<div>    'django.contrib.contenttypes',</div>
<div>    'django.contrib.sessions',</div>
<div>    'django.contrib.messages',</div>
<div>    'django.contrib.staticfiles',</div>
<div>    'django.contrib.humanize',</div>
<div>    'debug_toolbar',</div>
<div>    'rest_framework',</div>
<div>    'rest_framework_swagger',</div>
<div>    'polymorphic',</div>
<div>    'common',</div>
<div>    'api',</div>
<div>    'news',</div>
<div>    'pages',</div>
<div>    'home',</div>
<div>    'protein',</div>
<div>    'family',</div>
<div>    'residue',</div>
<div>    'alignment',</div>
<div>    'similaritysearch',</div>
<div>    'similaritymatrix',</div>
<div>    'structure',</div>
<div>    'ligand',</div>
<div>    'interaction',</div>
<div>    'mutation',</div>
<div>    'phylogenetic_trees',</div>
<div>    'sitesearch',</div>
<div>    'build',</div>
<div>    'construct',</div>
<div>    'tools',</div>
<div>    'drugs',</div>
<div>    'signprot',</div>
<div>    'mutational_landscape',</div>
<div>    'contactnetwork',</div>
<div>    'seqsign',</div>
<div>    'angles',</div>
<div>    'hotspots',</div>
<div>)</div>
<div><br></div>
<div>MIDDLEWARE = (</div>
<div>    'common.middleware.stats.StatsMiddleware',</div>
<div>    'debug_toolbar.middleware.DebugToolbarMiddleware',</div>
<div>    'django.contrib.sessions.middleware.SessionMiddleware',</div>
<div>    'django.middleware.common.CommonMiddleware',</div>
<div>    'django.middleware.csrf.CsrfViewMiddleware',</div>
<div>    'django.contrib.auth.middleware.AuthenticationMiddleware',</div>
<div>    # 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',</div>
<div>    'django.contrib.messages.middleware.MessageMiddleware',</div>
<div>    'django.middleware.clickjacking.XFrameOptionsMiddleware',</div>
<div>)</div>
<div><br></div>
<div>ROOT_URLCONF = 'protwis.urls'</div>
<div><br></div>
<div># WSGI_APPLICATION = 'protwis.wsgi.application'</div>
<div><br></div>
<div># Internationalization</div>
<div>LANGUAGE_CODE = 'en-us'</div>
<div>TIME_ZONE = 'Europe/Copenhagen'</div>
<div>USE_I18N = True</div>
<div>USE_L10N = True</div>
<div>USE_TZ = True</div>
<div><br></div>
<div># Default site configuration (gpcr - GPCRdb, gprotein - GproteinDb, arrestin - ArrestinDb, biasedsignalingatlas - Biased Signaling Atlas)</div>
<div>DEFAULT_SITE = &quotgpcr&quot</div>
<div><br></div>
<div># Static files (CSS, JavaScript, Images)</div>
<div>STATIC_URL = '/static/'</div>
<div>STATIC_ROOT = '/protwis/static/protwis'</div>
<div>STATICFILES_DIRS = (os.sep.join([BASE_DIR, &quotstatic&quot]),)</div>
<div>MEDIA_URL = '/media/'</div>
<div>MEDIA_ROOT = '/protwis/media/protwis'</div>
<div><br></div>
<div># Serializer</div>
<div>SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'</div>
<div>SESSION_COOKIE_AGE = 86400 #Expire cookies and session after 24 hrs</div>
<div>SWAGGER_SETTINGS = {</div>
<div>    'USE_SESSION_AUTH' : False,</div>
<div>}</div>
<div><br></div>
<div># Templates</div>
<div>TEMPLATES = [</div>
<div>    {</div>
<div>        'BACKEND': 'django.template.backends.django.DjangoTemplates',</div>
<div>        'DIRS': [</div>
<div>            # insert your TEMPLATE_DIRS here</div>
<div><br></div>
<div>        ],</div>
<div>        'APP_DIRS': True,</div>
<div>        'OPTIONS': {</div>
<div>            'context_processors': [</div>
<div>                'django.contrib.auth.context_processors.auth',</div>
<div>                'django.template.context_processors.debug',</div>
<div>                'django.template.context_processors.i18n',</div>
<div>                'django.template.context_processors.media',</div>
<div>                'django.template.context_processors.static',</div>
<div>                'django.template.context_processors.tz',</div>
<div>                'django.contrib.messages.context_processors.messages',</div>
<div>                'protwis.context_processors.current_site',</div>
<div>                'protwis.context_processors.canonical_tag',</div>
<div>                'protwis.context_processors.documentation_url',</div>
<div>                'protwis.context_processors.google_analytics',</div>
<div>                'protwis.context_processors.site_title'</div>
<div>            ],</div>
<div>        },</div>
<div>    },</div>
<div>]</div>
<div><br></div>
<div>if DEBUG:</div>
<div>    TEMPLATES[0]['OPTIONS']['debug'] = True</div>
<div><br></div>
<div># Debug toolbar</div>
<div>if DEBUG:</div>
<div>    DEBUG_TOOLBAR_PATCH_SETTINGS = False</div>
<div>    INTERNAL_IPS = ('10.0.2.2')</div>
<div><br></div>
<div># Logging</div>
<div>if DEBUG:</div>
<div> </div>
<div><br></div>
<div>#CACHE</div>
<div>CACHES = {</div>
<div>    'default': {</div>
<div>        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',</div>
<div>        'LOCATION': '/tmp/django_cache',</div>
<div>        'OPTIONS': {</div>
<div>            'MAX_ENTRIES': 10000000</div>
<div>        }</div>
<div>    },</div>
<div>    'alignments': {</div>
<div>        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',</div>
<div>        'LOCATION': '/tmp/django_cache_alignments',</div>
<div>        'OPTIONS': {</div>
<div>            'MAX_ENTRIES': 1000</div>
<div>        }</div>
<div>    }</div>
<div>}</div>
<div><b><br></b></div>
<div><b><br></b></div>
<div><b>   </b></div>